一、获取git仓库
	
	1、在本地项目目录中初始化仓库
		进入当前已有项目目录，使用命令：git init 初始化仓库，使用命令：git add 跟踪（track）文件，使用命令：git commit提交
		git init
		git add file1 file2 *.java
		git commit -m "say something"

	2、克隆现有远程仓库
		git clone [url] [my-project-name] 
		该方法会将git服务器仓库几乎所有数据拷贝下来，包括每一个文件的每一个版本，在当前目录新建文件夹[my-project-name]，
		数据放入当前目录的.git/目录下，并从中读取最新版文件的拷贝。

二、记录每次更新到仓库

	1、文件状态
		
		本地工作区中的文件大体有两种：
		已跟踪（tracked）：表示文件已纳入git版本管理中，包括modified、staged、committed；
		未跟踪（untracked）：表示文件未纳入git版本控制中，不存与上次快照记录中，也不在暂存区中。

	2、查看文件状态

		命令：git status
		功能：列出当前目录文件以及子目录文件的状态。

	3、跟踪文件

		对于untracked文件，可以使用 git add 命令跟踪文件，将文件或目录下的所有文件加入暂存目录中；
		对于已暂存的文件，若暂存后再次进行修改，文件处于modified状态，如果不在此对其使用 git add 命令，则在下次commit时，
		只会提交上次git add时的版本。

	4、状态简览

		命令：git status -s 或 git status --short
		功能：以紧凑格式输出文件状态，两个字符，左边是暂存区状态，右边是工作区状态：
			??  : 表示新添加的未跟踪文件
			A   ：表示新添加到暂存区文件
			M   ：表示文件已修改并暂存
			 M  ：表示文件已修改但未暂存
			MM  ：表示文件已修改并暂存后又进行了修改

	5、忽略文件

		有些文件既不想纳入git版本管理，也不想出现在未跟踪状态文件列表中，可以创建 .gitignore 文件，在其中描述被忽略的文件或目录形式。

		.gitignore文件格式规范：

		    所有空行或者以 ＃ 开头的行都会被 Git 忽略。
		    可以使用标准的 glob 模式匹配。
		    匹配模式可以以（/）开头防止递归。
		    匹配模式可以以（/）结尾指定目录。
		    要忽略指定模式以外的文件或目录，可以在模式前加上惊叹号（!）取反。

		glob模式指shell简化版正则表达式：
			*   : 匹配0个或任意多个字符；
			[]  ：匹配其中任意一个字符，eg：[abc]，匹配a或b或c；
			?   ：匹配任意一个字符；
			-   ：匹配括号中范围内任意一个字符，eg：[0-9]，匹配数字；
			**  ：匹配任意中间目录，eg：a/**/c，匹配：a/c，a/b/c，a/b/d/e/c；

		常用.gitignore文件模板：https://github.com/codechangesworld/gitignore

	6、查看已暂存和未暂存文件

		命令：git diff
		功能：该命令用来比较工作目录中的文件与暂存区快照文件之间的差异，也就是修改后还未暂存的变化详细内容。
		
		命令：git diff --cached 或 git diff --staged
		功能：表示已暂存但还未提交的文件详细内容

		命令：git difftool --tool=vimdiff
		功能：图形化输出比较

	7、提交

		命令：git commit [-a] [-m 'message']
		功能：该命令用来提交暂存区的快照，工作区未暂存的文件不会进行本次提交，可以在下一次提交时纳入版本管理，
		每一次commit操作都是项目的一次快照，以后可以回到快照状态，或进行比较。

		使用‘-a’ 选项可以跳过暂存步骤，可以自动将所有已跟踪文件暂存并提交。
		使用‘-m’ 选项添加提交注释。

	8、移除文件

		命令：git rm [-f] [--cached] file
		功能：该命令从暂存区移除文件，并删除工作目录文件。
		若直接在工作目录手动删除文件，使用git status时会出现提示，需要使用git rm命令重新删除暂存区文件。
		若文件已修改并已暂存，则需要加‘-f’选项强制删除；
		若只想删除暂存区文件，而保存工作目录文件，需要使用'--cached'选项。

	9、移动文件

		命令：git mv source_name target_name
		功能：该命令表示将暂存区中的source_name文件重命名为target_name文件
		
		与以下操作功能相同
		文件重命名         ：mv source_name target_name
		暂存区移除旧文件   ：git rm source_name
		暂存区添加新文件   ：git add target_name

		注：文件重命名后，在提交前一定要将就文件从暂存区删除，并添加新文件。

三、查看提交历史
	
	命令：git log
	功能：查看项目所有提交历史。

	-p  		显示每次提交差异
	-<n>		显示最近n次提交历史
	--stat 		显示每次提交的简略统计信息
	--pretty 	使用不同于默认格式输出
		oneLine
		short
		full
		fuller
		format	可以使用format自定义格式，format常用选项：https://git-scm.com/book/zh/v2/ch00/pretty_format
	eg:
	git log --pretty=format:"%h - %an, %ar : %s"
	git log --pretty=format:"%h %s" --graph

	git log 其他常用选项：
	https://git-scm.com/book/zh/v2/ch00/log_options
	https://git-scm.com/book/zh/v2/Git-%E5%9F%BA%E7%A1%80-%E6%9F%A5%E7%9C%8B%E6%8F%90%E4%BA%A4%E5%8E%86%E5%8F%B2

四、撤销操作
	
	命令：git commit -m 'message' --amend
	功能：尝试重新提交暂存区内容，不会建立新的快照，只是在上次提交的基础上添加新的修改和提交说明。

	命令：git reset HEAD <file>...
	功能：撤销 git add 操作，可以将暂存区文件移除，变成已修改但未暂存的状态。

	命令：git checkout -- <file>...
	功能：撤销对文件的所有修改，保存最后一次 git add 时的状态，即从暂存区复制一份文件覆盖当前文件。

	注：
	在 Git 中任何已提交（commited）的东西几乎总是可以恢复的。甚至那些被删除的分支中的提交或使用 
	--amend 选项覆盖的提交也可以恢复。然而，任何你未提交的东西丢失后很可能再也找不到了。

五、远程仓库的使用

	命令：git remote
	功能：查看远程仓库，返回远程仓库的简写名称，如：默认的 origin 或自定义名称。

	命令：git remote -v
	功能：返回远程仓库的简写以及连接信息。

	命令：git remote add <shortname> <url>
	功能：添加远程仓库，short-name 为仓库简写名。

	命令：git fetch <remote-name>
	功能：从远程仓库抓取数据，被抓取数据为远程仓库有但本地仓库没有的数据，会拉取远程仓库所有分支，
	      使得本地拥有远程仓库所有分支的引用，但不会自动合并数据到本地仓库中。

	命令：git pull
	功能：若本地分支跟踪一个远程分支，则可以直接拉取并合并远程数据到本地中。

	命令：git push <remote-name> <brance-name>
	功能：推送本地分支数据到远程仓库

	命令：git remote show <remote-name>
	功能：查看远程仓库详细信息，包括远程仓库所有分支，本地分支跟踪情况，以及git pull和git push命令自动合并和更新情况。

	命令：git remote rename <source-name> <target-name>
	功能：重命名远程仓库引用简写名称<shortname>

	命令：git remote rm <remote-name>
	功能：移除远程仓库引用

六、打标签
	
	Git 可以给历史中的某一次提交打标签，表示该提交的重要性。
	Git标签有 “轻量标签” 和 “附注标签” 两种，前者仅保存对某次提交的引用，没有额外信息。
	后者包含了许多额外信息，一般建议使用后者。

	命令：git tag [-l 'tag-name']
	功能：列出已有标签，若标签太多，选项 '-l' 会只列出指定标签。

	命令：git tag -a <tag-name> -m 'comment'
	功能：创建附注标签，并添加注释信息。

	命令：git show <tag-name>
	功能：显示标签信息和提交信息。

	命令：git tag <tag-name>
	功能：创建轻量标签

	命令：git tag -a <tag-name> <hash>
	功能：为历史中的某次提交创建标签，hash 为该次提交的哈希校验值（前边部分值也可以）。

	命令：git push <remote-name> <tag-name>
	功能：将指定标签推送到远程仓库。

	命令：git push <remote-name> --tags
	功能：将不再远程仓库的所有标签推送过去。

	命令：git checkout -b <branch-name> <tag-name>
	功能：从 tag-name 标签检出项目并创建新的分支。

七、Git别名

	命令：git config --global alias.st status
	功能：为 stutas 命令设置全局别名 st，之后使用 git status 与 git st 功能相同。
